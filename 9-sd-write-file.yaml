heat_template_version: 2013-05-23
parameters:
  key_name:
    type: string
    description: Name of a key pair to enable SSH access to instances.
    default: test
  flavor:
    type: string
    default: m1.small
    description: Flavor to use for the WordPress server.
    constraints:
      - custom_constraint: nova.flavor
  image:
    type: string
    default: fedora-software-config 
  ex_net:
    type: string
    default: 500d8259-f8ae-4806-8b95-252fb09c012f
  int_sub:
    type: string
    default: 4d974b80-2c35-466a-ad13-b2253cab9bc2
  int_net:
    type: string
    default: 05d8e681-4b37-4570-bc8d-810089f706b2	

resources:
  port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: int_net}
      security_groups: [{get_resource: the_sg}]
  the_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name: the_sg
      description: Ping and SSH
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
  floatingip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: ex_net}
  config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: foo
      - name: bar
      outputs:
      - name: result
      config: |
        #!/bin/sh -x
        echo "Writing to /tmp/$bar"
        echo $foo > /tmp/$bar
        echo -n "The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action" > $heat_outputs_path.result
        echo "Written to /tmp/$bar"
        echo "Output to stderr" 1>&2

  deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: server
      input_values:
        foo: fooooo
        bar: baaaaa
      signal_transport: HEAT_SIGNAL

  server:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      user_data_format: SOFTWARE_CONFIG
      networks:
      - port: {get_resource: port}
        floating_ip: {get_resource: floatingip}
      security_groups:
      - {get_resource: the_sg}

outputs:
  result:
    value:
      get_attr: [deployment, result]
  stdout:
    value:
      get_attr: [deployment, deploy_stdout]
  stderr:
    value:
      get_attr: [deployment, deploy_stderr]
  status_code:
    value:
      get_attr: [deployment, deploy_status_code]
